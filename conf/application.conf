# This is the main configuration file for the application.
# ~~~~~

# Application Name and revision number
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
app {     
  major = 6  # major trunk change
  minor = 3  # minor trunk modification, compatible within the same major
  revision = 0  # branch svn revision
  version = ${app.major}.${app.minor}.${app.revision}
  name = GBOerp ${app.major}.${app.minor}
}

# Languages
play.i18n.langs = [ "en", "en-US", "fr" ]

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# This must be changed for production, but we recommend not changing it in this file.
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
play.crypto.secret="XnFG/duDbEtP`KI@S1uIHALbgP;HJ8aoEmK`>hT0ux;3Ok0]qM2T<Mmmm93?==Vc"
play.crypto.secret=${?APPLICATION_SECRET}

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
# GBO Database --------- DEVELOPMENT
db.default.driver=com.microsoft.sqlserver.jdbc.SQLServerDriver
db.default.url="jdbc:sqlserver://localhost\\SQLEXPRESS08;databaseName=GroupeBO;"
db.default.url=${?DATABASE_URL_DB}
db.default.username = GBOusager
db.default.password = "$$gboX23L14u07*15"
db.default.password = ${?DATABASE_USER_PW}

# JDBC connection pooling
# ~~~~~~~~~~~~~~~~~~~~~~~
# Set a connection's default autocommit setting
play.db.pool = bonecp
db.default.bonecp.autocommit=true

# Set a connection's default isolation level
db.default.bonecp.isolation=READ_COMMITTED

# In order to reduce lock contention and thus improve performance, 
# each incoming connection request picks off a connection from a 
# pool that has thread-affinity. 
# The higher this number, the better your performance will be for the 
# case when you have plenty of short-lived threads. 
# Beyond a certain threshold, maintenance of these pools will start 
# to have a negative effect on performance (and only for the case 
# when connections on a partition start running out).
db.default.bonecp.partitionCount=3

# The number of connections to create per partition. Setting this to 
# 5 with 3 partitions means you will have 15 unique connections to the 
# database. Note that BoneCP will not create all these connections in 
# one go but rather start off with minConnectionsPerPartition and 
# gradually increase connections as required.
db.default.bonecp.maxConnectionsPerPartition=50

# The number of initial connections, per partition.
db.default.bonecp.minConnectionsPerPartition=5

# When the available connections are about to run out, BoneCP will 
# dynamically create new ones in batches. This property controls 
# how many new connections to create in one go (up to a maximum of 
# maxConnectionsPerPartition). Note: This is a per-partition setting.
db.default.bonecp.acquireIncrement=1

# After attempting to acquire a connection and failing, try to 
# connect this number of times before giving up.
db.default.bonecp.acquireRetryAttempts=10

# How long to wait before attempting to obtain a 
# connection again after a failure.
db.default.bonecp.acquireRetryDelay=5 seconds

# The maximum time to wait before a call 
# to getConnection is timed out.
db.default.bonecp.connectionTimeout=1 second

# Idle max age
db.default.bonecp.idleMaxAge=10 minute

# This sets the time for a connection to remain idle before sending a test query to the DB. 
# This is useful to prevent a DB from timing out connections on its end. 
db.default.bonecp.idleConnectionTestPeriod=5 minutes

# An initial SQL statement that is run only when 
# a connection is first created.
db.default.bonecp.initSQL="SELECT 1"

# If enabled, log SQL statements being executed.
db.default.bonecp.logStatements=false

# The maximum connection age.
db.default.bonecp.maxConnectionAge=1 hour

# The maximum query execution time. Queries slower than this will be logged as a warning.
db.default.bonecp.queryExecuteTimeLimit= 10 seconds

# Thread pool config
# ~~~~~~~~~~~~~~~~~~
# See https://www.playframework.com/documentation/2.4.x/ThreadPools
# Also check : http://stackoverflow.com/questions/26174220/how-to-tune-play-framework-application-with-proper-threadpools
# This means I have 150 max threads = 150 max requests
# This profile is recommended for Java applications that do synchronous IO (database access)
play {
  akka {
    akka.loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = WARNING
    actor {
      default-dispatcher = {
        fork-join-executor {
          parallelism-min = 150
          parallelism-max = 150
        }
      }
    }
  }
}

# Modules
play.modules.enabled += "modules.ApplicationContextModule"